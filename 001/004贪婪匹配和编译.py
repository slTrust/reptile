
import re

'''
贪婪匹配
最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：
'''
a = re.match(r'^(\d+)(0*)$', '102300').groups()
print(a) #('102300', '')
# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：

a2 = re.match(r'^(\d+?)(0*)$', '102300').groups()
print(a2) # ('1023', '00')


'''
编译
-当我们在Python中使用正则表达式时，re模块内部会干两件事情：
-编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
-用编译后的正则表达式去匹配字符串。
-如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
'''
# 编译:
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
g1 = re_telephone.match('010-12345').groups()
print(g1) #('010', '12345')
g2 = re_telephone.match('010-8086').groups()
print(g2) #('010', '8086')

#编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。
